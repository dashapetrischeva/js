if (confirm('–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è?')) {
	function print(container, content, tag) {
		let myTag = document.createElement(tag)
		myTag.innerText = content
		container.append(myTag)
	}
	const task = document.querySelector('.task')
	const titleSolution = document.createElement('h2')
	titleSolution.className = 'title-solution'
	titleSolution.innerText = '–†—ñ—à–µ–Ω–Ω—è:'
	task.append(titleSolution)
	//–î–∞–Ω–æ –∫–ª–∞—Å PhoneNumber. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ string, –ø—Ä–∏ —è–∫–æ–º—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–º–µ—Ä–∞ –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä(050‚Ä¶. ü°™ MTC, 096‚Ä¶ ü°™ Kyivstar, ‚Ä¶.)
	class PhoneNumber {
		constructor(number) {
			this.number = number.trim()
		}
		[Symbol.toPrimitive] = function () {

			const code = this.number.slice(0, 3)
			let result
			switch (code) {
				case '050':
				case '066':
				case '095':
				case '099':
					result = 'MTC'
					break
				case '067':
				case '068':
				case '096':
				case '097':
				case '098':
					result = 'Kyivstar'
					break
				case '063':
				case '073':
				case '093':
					result = 'Lifecell'
					break
				default:
					result = '–ù–µ–≤—ñ–¥–æ–º–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä'
			}
			return `${this.number} ‚Äî ${result}`
		}

	}
	const number1 = new PhoneNumber('0502345678')
	const number2 = new PhoneNumber('0962345678')
	print(task, number1, 'pre')
	print(task, number2, 'pre')
}